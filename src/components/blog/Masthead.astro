---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";

interface Props {
	content: CollectionEntry<"post">;
	readingTime: string;
}

const { content, readingTime } = Astro.props;
const { data } = content;

// データの存在チェック
const hasCoverImage = data.coverImage?.src && data.coverImage?.alt;
const hasUpdatedDate = data.updatedDate && data.updatedDate instanceof Date;
const hasTags = data.tags && data.tags.length > 0;
---

<!-- カバー画像 -->{
	hasCoverImage && data.coverImage && (
		<div class="mb-6 aspect-video">
			<Image
				alt={data.coverImage.alt}
				class="object-cover"
				fetchpriority="high"
				loading="eager"
				src={data.coverImage.src}
			/>
		</div>
	)
}

<!-- ドラフト表示 -->
{
	data.draft && (
		<span class="text-base text-red-500" role="status" aria-label="下書き">
			(Draft)
		</span>
	)
}

<!-- タイトル -->
<h1 class="title">{data.title}</h1>

<!-- メタ情報（公開日・読了時間・更新日） -->
<div class="flex flex-wrap items-center gap-x-3 gap-y-2">
	<p class="font-semibold">
		<FormattedDate date={data.publishDate} /> / {readingTime}
	</p>

	{
		hasUpdatedDate && (
			<span class="bg-quote/5 text-quote rounded-lg px-2 py-1">
				Updated: <FormattedDate class="ms-1" date={data.updatedDate!} />
			</span>
		)
	}
</div>

<!-- タグ一覧 -->
{
	hasTags && (
		<div class="mt-2" role="list" aria-label="記事のタグ">
			<svg
				aria-hidden="true"
				class="inline-block h-6 w-6"
				fill="none"
				focusable="false"
				stroke="currentColor"
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="1.5"
				viewBox="0 0 24 24"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path d="M0 0h24v24H0z" fill="none" stroke="none" />
				<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
				<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
				<path d="M6 9h-.01" />
			</svg>
			{data.tags.map((tag, index) => (
				<span class="contents" role="listitem">
					<a
						class="cactus-link inline-block before:content-['#']"
						data-pagefind-filter={`tag:${tag}`}
						href={`/tags/${tag}/`}
						aria-label={`タグ「${tag}」の記事一覧を表示`}
					>
						<span class="sr-only">タグ: </span>
						{tag}
					</a>
					{index < data.tags.length - 1 && ", "}
				</span>
			))}
		</div>
	)
}
